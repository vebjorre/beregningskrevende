for (i in 1:length(beta)){
logliklist[i] <- loglik(beta[i],complit,66)
}
plot(beta,logliklist)
betahat <- optimize(loglik,c(0,10),complit,66, maximum=TRUE)[[1]]
beta <- seq(0,10,0.1)
logliklist <- rep(NA,length(beta))
for (i in 1:length(beta)){
logliklist[i] <- loglik(beta[i],complit,66)
}
plot(beta,logliklist)
beta <- seq(0,5,0.1)
logliklist <- rep(NA,length(beta))
for (i in 1:length(beta)){
logliklist[i] <- loglik(beta[i],complit,66)
}
plot(beta,logliklist)
betahat <- optimize(loglik,c(0,4),complit,66, maximum=TRUE)[[1]]
sum(complit==0)
sum(complit==1)
get_neighbours <- function(l, dim, i){
n <- length(l)
neighbours <- rep(NA, 4)
#c(up,right,down,left)
moves <- c(-dim,1,dim,-1)
valid <- ifelse((i + moves) < 1 | (i + moves) > n, FALSE,TRUE)
return(i+moves[valid])
}
get_neighbours(complit.df$X1,66,4356)
get_neighbours(complit.df$X1,66,1)
get_neighbours(complit.df$X1,66,15)
loglik_i <- function(beta,l,dim,i){
neighb <- get_neighbours(l,dim,i)
part1 <- sum(l[i]==l[neighb])*log(beta)
part2 <- log(beta^(sum(l[neighb]==0))+beta^(sum(l[neighb==1])))
return (part1-part2)
}
loglik <- function(beta,l,dim){
n <- length(l)
ll <- rep(NA,n)
for (i in 1:n){
ll[i] <- loglik_i(beta,l,dim,i)
}
return (sum(ll))
}
betahat <- optimize(loglik,c(0,4),complit,66, maximum=TRUE)[[1]]
loglik_i <- function(beta,l,dim,i){
neighb <- get_neighbours(l,dim,i)
part1 <- sum(l[i]==l[neighb])*log(beta)
part2 <- log(beta^(sum(l[neighb]==0))+beta^(sum(l[neighb]==1)))
return (part1-part2)
}
loglik <- function(beta,l,dim){
n <- length(l)
ll <- rep(NA,n)
for (i in 1:n){
ll[i] <- loglik_i(beta,l,dim,i)
}
return (sum(ll))
}
betahat <- optimize(loglik,c(0,4),complit,66, maximum=TRUE)[[1]]
beta <- seq(0,5,0.1)
logliklist <- rep(NA,length(beta))
for (i in 1:length(beta)){
logliklist[i] <- loglik(beta[i],complit,66)
}
plot(beta,logliklist)
betahat <- optimize(loglik,c(0,4),complit,66, maximum=TRUE)[[1]]
beta <- seq(0,5,0.1)
logliklist <- rep(NA,length(beta))
for (i in 1:length(beta)){
logliklist[i] <- loglik(beta[i],complit,66)
}
plot(beta,logliklist)
betahat <- optimize(loglik,c(0,4),complit,66, maximum=TRUE)[[1]]
betahat <- optimize(loglik,c(0,10),complit,66, maximum=TRUE)[[1]]
logliklist
source('~/NTNU/Vaar4/Romlig/Romlig/Assignment3/Code.r', echo=TRUE)
View(complit)
betahat <- optimize(loglik,c(0,10),complit.df$value,66, maximum=TRUE)[[1]]
View(complit.df)
loglik_i <- function(beta,l,dim,i){
neighb <- get_neighbours(l,dim,i)
const <- exp(beta*sum(l[neighb]==0)) + exp(beta*sum(l[neighb]==1))
return (beta*sum(l[i]==l[neighb]) - log(const))
}
loglik <- function(beta,l,dim){
n <- length(l)
ll <- rep(NA,n)
for (i in 1:n){
ll[i] <- loglik_i(beta,l,dim,i)
}
return (sum(ll))
}
betahat <- optimize(loglik,c(0,10),complit.df$value,66, maximum=TRUE)[[1]]
beta <- seq(0,5,0.1)
logliklist <- rep(NA,length(beta))
for (i in 1:length(beta)){
logliklist[i] <- loglik(beta[i],complit,66)
}
plot(beta,logliklist)
betahat <- optimize(loglik,c(0,5),complit.df$value,66, maximum=TRUE)[[1]]
betahat <- optimize(loglik,c(0,5),complit.df$value,66, maximum=TRUE)[[1]]
source('~/NTNU/Vaar4/Romlig/Romlig/Assignment3/Code.r', echo=TRUE)
gibbs_onestep <- function(d,l,beta,dim){
n = length(l)
idx <- ceiling(n*runif(n))
for (i in idx){
likelihood0 <- dnorm(d[i], mean=0.02, sd=0.06)
likelihood1 <- dnorm(d[i], mean=0.02, sd=0.06)
neighb <- get_neighbours_bc(l,dim,i)
prior0 <- beta^(sum(l[neighb]==0))
prior1 <- beta^(sum(l[neighb]==1))
posterior0 <- prior0*likelihood0
posterior1 <- prior1*likelihood1
p0 <- posterior0/(posterior0+posterior1)
if (runif()<p0){
l[i] <- 0
}
else{
l[i] <- 1
}
}
return(l)
}
d <- seismic$V1
l <- as.vector(complit)
dim <- 75
d <- seismic$V1
l <- round(runif(n))
num_it <- 100
MCMC_reals <- matrix(0,ncol=num_it,nrow=n)
for (i in 1:num_it){
l <- gibbs_iteration(d,l,betahat,dim)
MCMC_reals[,i] <- l
}
gibbs_iteration <- function(d,l,beta,dim){
n = length(d)
idx <- ceiling(n*runif(n))
for (i in idx){
likelihood0 <- dnorm(d[i], mean=0.02, sd=0.06)
likelihood1 <- dnorm(d[i], mean=0.02, sd=0.06)
neighb <- get_neighbours_bc(l,dim,i)
prior0 <- beta^(sum(l[neighb]==0))
prior1 <- beta^(sum(l[neighb]==1))
posterior0 <- prior0*likelihood0
posterior1 <- prior1*likelihood1
p0 <- posterior0/(posterior0+posterior1)
if (runif()<p0){
l[i] <- 0
}
else{
l[i] <- 1
}
}
return(l)
}
dim <- 75
d <- seismic$V1
l <- round(runif(n))
num_it <- 100
MCMC_reals <- matrix(0,ncol=num_it,nrow=n)
for (i in 1:num_it){
l <- gibbs_iteration(d,l,betahat,dim)
MCMC_reals[,i] <- l
}
gibbs_iteration <- function(d,l,beta,dim){
n = length(d)
idx <- ceiling(n*runif(n))
for (i in idx){
likelihood0 <- dnorm(d[i], mean=0.02, sd=0.06)
likelihood1 <- dnorm(d[i], mean=0.02, sd=0.06)
neighb <- get_neighbours_bc(l,dim,i)
prior0 <- beta^(sum(l[neighb]==0))
prior1 <- beta^(sum(l[neighb]==1))
posterior0 <- prior0*likelihood0
posterior1 <- prior1*likelihood1
p0 <- posterior0/(posterior0+posterior1)
if (runif(1)<p0){
l[i] <- 0
}
else{
l[i] <- 1
}
}
return(l)
}
dim <- 75
d <- seismic$V1
l <- round(runif(n))
num_it <- 100
MCMC_reals <- matrix(0,ncol=num_it,nrow=n)
for (i in 1:num_it){
l <- gibbs_iteration(d,l,betahat,dim)
MCMC_reals[,i] <- l
}
shalerate = colSums(l_MCMC)/n
shalerate = colSums(MCMC_reals)/n
sandrate = 1-frac_1
sandrate = 1-shalerate
plot(1:100,sandrate)
num_it <- 1000
MCMC_reals <- matrix(0,ncol=num_it,nrow=n)
for (i in 1:num_it){
l <- gibbs_iteration(d,l,betahat,dim)
MCMC_reals[,i] <- l
}
shalerate = colSums(MCMC_reals)/n
sandrate = 1-shalerate
plot(1:100,sandrate)
plot(1:num_it,sandrate)
seismic.df["post"] <- MCMC_reals[,num_it]
ggplot(data=seismic.df,aes(X1,X2),fill=post)
ggplot(data=seismic.df,aes(X1,X2),fill=post) + fill.d + theme
ggplot(data=seismic.df,aes(X1,X2),fill=post) + geom_raster() + fill.d + theme
ggplot(data=seismic.df,aes(X1,X2),fill=as.factor(post)) + geom_raster() + fill.d + theme
ggplot(data=seismic.df,aes(X1,X2),fill=as.factor(post)) + geom_raster(aes(fill=post)) + fill.d + theme
seismic.df["post"] <- as.factor(MCMC_reals[,num_it])
ggplot(data=seismic.df,aes(X1,X2)) + geom_raster(aes(fill=post)) + fill.d + theme
dim <- 75
d <- seismic$V1
l <- round(runif(n))
num_it <- 2000
MCMC_reals <- matrix(0,ncol=num_it,nrow=n)
for (i in 1:num_it){
l <- gibbs_iteration(d,l,betahat,dim)
MCMC_reals[,i] <- l
}
shalerate = colSums(MCMC_reals)/n
sandrate = 1-shalerate
plot(1:num_it,sandrate)
seismic.df["post"] <- as.factor(MCMC_reals[,num_it])
ggplot(data=seismic.df,aes(X1,X2)) + geom_raster(aes(fill=post)) + fill.d + theme
gibbs_iteration <- function(d,l,beta,dim){
n = length(d)
idx <- ceiling(n*runif(n))
for (i in idx){
likelihood0 <- dnorm(d[i], mean=0.02, sd=0.06)
likelihood1 <- dnorm(d[i], mean=0.08, sd=0.06)
neighb <- get_neighbours_bc(l,dim,i)
prior0 <- beta^(sum(l[neighb]==0))
prior1 <- beta^(sum(l[neighb]==1))
posterior0 <- prior0*likelihood0
posterior1 <- prior1*likelihood1
p0 <- posterior0/(posterior0+posterior1)
if (runif(1)<p0){
l[i] <- 0
}
else{
l[i] <- 1
}
}
return(l)
}
dim <- 75
d <- seismic$V1
l <- round(runif(n))
num_it <- 2000
MCMC_reals <- matrix(0,ncol=num_it,nrow=n)
for (i in 1:num_it){
l <- gibbs_iteration(d,l,betahat,dim)
MCMC_reals[,i] <- l
}
shalerate = colSums(MCMC_reals)/n
sandrate = 1-shalerate
plot(1:num_it,sandrate)
seismic.df["post"] <- as.factor(MCMC_reals[,num_it])
ggplot(data=seismic.df,aes(X1,X2)) + geom_raster(aes(fill=post)) + fill.d + theme
plot(1:num_it,sandrate, type="l")
MCMC_reals <- MCMC_res[,c(500,800,1100,1400,1700,2000)]
source('~/NTNU/Vaar4/Romlig/Romlig/Assignment3/Code.r', echo=TRUE)
MCMC.df <-
as_tibble(MCMC_reals) %>%
bind_cols(dplyr::select(seismic.df, X1, X2)) %>%
gather(sim, value, -X1, -X2)
ggplot(MCMC.df, aes(x=X1, y=X2, fill=factor(value))) +
facet_wrap(~sim) +
geom_raster() +
scale_fill_brewer(palette=4,type="qual") +
theme_minimal() +
labs(fill="Value") +
xlab("x") +
ylab("y")
burnin <- c(1:500)
ratio.df <- data.frame("Iteration"=1:num_it, shalerate)
View(ratio.df)
ratio.df <- data.frame("Iteration"=1:num_it, sandrate)
ggplot(data=ratio.df, aes(Iteration,sandrate))
ggplot(data=ratio.df, aes(Iteration,sandrate)) + geom_line()+theme
fill.v <- scale_fill_gradient(low="white", high="black")
p <- ggplot(seismic.df, aes(x=X1,y=X2))
p + geom_raster(aes(fill=Variance)) + fill.v + theme + xlab("x") + ylab("y")
fill.v <- scale_fill_gradient(low="black", high="white")
p + geom_raster(aes(fill=Variance)) + fill.v + theme + xlab("x") + ylab("y")
fill.v <- scale_fill_gradient2(low="white",mid="white",high="black",midpoint=0.2)
p + geom_raster(aes(fill=Variance)) + fill.v + theme + xlab("x") + ylab("y")
fill.v <- scale_fill_gradient()
p + geom_raster(aes(fill=Variance)) + fill.v + theme + xlab("x") + ylab("y")
MCMC_mean <- rowMeans(MCMC_reals[,-burnin])
library(matrixStats)
MCMC_var <- rowVars(MCMC_reals[,-burnin])
seismic.df["MCMC_v"] <- MCMC_var
p <- ggplot(data=seismic.df, aes(X1,X2))
p <- ggplot(data=seismic.df, aes(X1,X2))
p + geom_raster(fill=MCMC_m) + fill.c + theme
seismic.df["MCMC_m"] <- MCMC_mean
seismic.df["MCMC_v"] <- MCMC_var
p <- ggplot(data=seismic.df, aes(X1,X2))
p + geom_raster(fill=MCMC_m) + fill.c + theme
p + geom_raster(aes(fill=MCMC_m)) + fill.c + theme
p <- ggplot(data=seismic.df, aes(X1,X2))
p + geom_raster(aes(fill=MCMC_m)) + fill.c + theme
MCMC_mean <- rowMeans(MCMC_res[,-burnin])
MCMC_var <- rowVars(MCMC_res[,-burnin])
seismic.df["MCMC_m"] <- MCMC_mean
seismic.df["MCMC_v"] <- MCMC_var
p <- ggplot(data=seismic.df, aes(X1,X2))
p + geom_raster(aes(fill=MCMC_m)) + fill.c + theme
p + geom_raster(aes(fill=MCMC_v)) + fill.v + theme
p + geom_raster(aes(fill=MCMC_m)) + fill.c + theme + xlab("x") + ylab("y")
p + geom_raster(aes(fill=MCMC_v)) + fill.v + theme + xlab("x") + ylab("y")
p + geom_raster(aes(fill=MCMC_m)) + fill.c + theme + labs(x="x", y="y", fill="Mean")
p + geom_raster(aes(fill=MCMC_v)) + fill.v + theme + labs(x="x", y="y", fill="Variance")
fill.l <- scale_fill_gradient2(midpoint=0.5)
p + geom_raster(aes(fill=MCMC_m)) + fill.l + theme + labs(x="x", y="y", fill="Mean")
p + geom_raster(aes(fill=MCMC_v)) + fill.v + theme + labs(x="x", y="y", fill="Variance")
p + geom_raster(aes(fill=MCMC_m)) + fill.l + theme + labs(x="x", y="y", fill="Mean")
MCMC_MMAP <- rowSums(MCMC_res[-burnin])/(num_it-length(burnin))
MCMC_MMAP <- rowSums(MCMC_res[,-burnin])/(num_it-length(burnin))
seismic.df["MCMC_p"] <- MCMC_MMAP
MCMC_MMAP <- as.integer(rowSums(MCMC_res[,-burnin])/(num_it-length(burnin)) > 0.5)
seismic.df["MCMC_p"] <- MCMC_MMAP
p + geom_raster(aes(fill=MCMC_p)) + fill.d + theme + labs(x="x", y="y", fill="MMAP")
p <- ggplot(data=seismic.df, aes(X1,X2))
fill.l <- scale_fill_gradient2(midpoint=0.5)
p + geom_raster(aes(fill=MCMC_m)) + fill.l + theme + labs(x="x", y="y", fill="Mean")
p + geom_raster(aes(fill=MCMC_v)) + fill.v + theme + labs(x="x", y="y", fill="Variance")
p + geom_raster(aes(fill=MCMC_p)) + fill.d + theme + labs(x="x", y="y", fill="MMAP")
seismic.df["MCMC_p"] <- as.factor(MCMC_MMAP)
p <- ggplot(data=seismic.df, aes(X1,X2))
fill.l <- scale_fill_gradient2(midpoint=0.5)
p + geom_raster(aes(fill=MCMC_m)) + fill.l + theme + labs(x="x", y="y", fill="Mean")
p + geom_raster(aes(fill=MCMC_v)) + fill.v + theme + labs(x="x", y="y", fill="Variance")
p + geom_raster(aes(fill=MCMC_p)) + fill.d + theme + labs(x="x", y="y", fill="MMAP")
sample(1:10,10)
sample(1:10,10,replace=TRUE)
range(posterior)
source('~/NTNU/Vaar4/Romlig/Romlig/Assignment3/Code.r', echo=TRUE)
source('~/NTNU/Vaar4/Romlig/Romlig/Assignment3/Code.r', echo=TRUE)
ggplot(data=ratio.df, aes(Iteration,sandrate)) + geom_line() + theme + ylab("Sand proportion")
range(sandrat)
range(sandrate)
sandrate[50]
sandrate[49]
sandrate[40]
sandrate[30]
sandrate[20]
sandrate[25]
sandrate[30]
mean(sandrate)
ggplot(data=ratio.df, aes(Iteration,sandrate)) + geom_line() + ylab("Sand proportion")
source('~/NTNU/Vaar4/Romlig/Romlig/Assignment2/Ex2.R', echo=TRUE)
sample.post <- replicate(nsims, rpois(n,intensity.post)+data$pines)
mean.post <- rowMeans(sample.post)
#Mean of 100 realizations
mean.plots <- vector("list", 2)
d <- data
d["pines"] <- mean.prior
p <- ggplot(d, aes(x,y))
mean.plots[[1]] <- p + geom_raster(aes(fill=pines)) + fill + theme
d["pines"] <- mean.post
p <- ggplot(d, aes(x,y))
mean.plots[[2]] <- p + geom_raster(aes(fill=pines)) + fill + theme
mean.plots
#Simulate posterior count models
post.counts <- replicate(nsims, rpois(n, intensity.post)+data$pines)
#Plot posterior count models
post.plots <- vector("list",nsims)
for (i in 1:nsims){
d <- data
d["pines"] <- post.counts[,i]
p <- ggplot(d, aes(x,y))
post.plots[[i]] <- p + geom_raster(aes(fill=pines)) + fill + theme
}
post.plots
#Simulate count model from prior distribution
nsims <- 6
#Simulate posterior count models
post.counts <- replicate(nsims, rpois(n, intensity.post)+data$pines)
#Plot posterior count models
post.plots <- vector("list",nsims)
for (i in 1:nsims){
d <- data
d["pines"] <- post.counts[,i]
p <- ggplot(d, aes(x,y))
post.plots[[i]] <- p + geom_raster(aes(fill=pines)) + fill + theme
}
post.plots
source('~/NTNU/Vaar4/Romlig/Romlig/Assignment2/Ex2.R', echo=TRUE)
install.packages("here")
source('~/NTNU/Vaar4/Beregningskrevende/Project/Project3/ProbA.R', echo=TRUE)
source('~/NTNU/Vaar4/Beregningskrevende/Project/Project3/ProbA.R', echo=TRUE)
setwd("C:/Users/vrekk/OneDrive/Dokumenter/NTNU/Vaar4/Beregningskrevende/Project/Project3")
source('~/NTNU/Vaar4/Beregningskrevende/Project/Project3/ProbA.R', echo=TRUE)
plot(1:98,res_LS)
plot(1:98,res_LA)
range(resb_La)
range(resb_LA)
range(res_LA)
#Fetch data
bilirubin <- read.table("bilirubin.txt",header=T)
#Boxplot
boxplot(log(meas)~pers,data=bilirubin,xlab="Person",ylab="log(Concentration)")
#Fit linear model
fit <- lm(log(meas)~pers,data=bilirubin)
#Find F-value
Fval <- summary(fit)$fstatistic[1]
#Function to compute F-value of random permutation.
#NB! y0=log(meas)
permTest <- function(x0,y0){
n <- length(x0)
x <- sample(x0,n)
return(as.numeric(summary(lm(y0~x))$fstatistic[1]))
}
#Sample 999 values of F
n_perms <- 999
F_sample <- rep(NA,n_perms)
for (i in 1:n_perms){
F_sample[i] <- permTest(bilirubin$pers,log(bilirubin$meas))
}
#Compute p-value using the sample of F-values
pval <- sum(F_sample > Fval)/n_perms
summary(fit)
#Sample 999 values of F
n_perms <- 999
F_sample <- rep(NA,n_perms)
for (i in 1:n_perms){
F_sample[i] <- permTest(bilirubin$pers,log(bilirubin$meas))
}
#Compute p-value using the sample of F-values
sum(F_sample > Fval)/n_perms
#Sample 999 values of F
n_perms <- 999
F_sample <- rep(NA,n_perms)
for (i in 1:n_perms){
F_sample[i] <- permTest(bilirubin$pers,log(bilirubin$meas))
}
#Compute p-value using the sample of F-values
sum(F_sample > Fval)/n_perms
#Sample 999 values of F
n_perms <- 999
F_sample <- rep(NA,n_perms)
for (i in 1:n_perms){
F_sample[i] <- permTest(bilirubin$pers,log(bilirubin$meas))
}
#Compute p-value using the sample of F-values
sum(F_sample > Fval)/n_perms
set.seed(0)
#Sample 999 values of F
n_perms <- 999
F_sample <- rep(NA,n_perms)
for (i in 1:n_perms){
F_sample[i] <- permTest(bilirubin$pers,log(bilirubin$meas))
}
#Compute p-value using the sample of F-values
pval <- sum(F_sample > Fval)/n_perms
set.seed(0)
#Sample 999 values of F
n_perms <- 999
F_sample <- rep(NA,n_perms)
for (i in 1:n_perms){
F_sample[i] <- permTest(bilirubin$pers,log(bilirubin$meas))
}
#Compute p-value using the sample of F-values
pval <- sum(F_sample > Fval)/n_perms
set.seed(0)
#Sample 999 values of F
n_perms <- 999
F_sample <- rep(NA,n_perms)
for (i in 1:n_perms){
F_sample[i] <- permTest(bilirubin$pers,log(bilirubin$meas))
}
#Compute p-value using the sample of F-values
pval <- sum(F_sample > Fval)/n_perms
set.seed(1)
#Sample 999 values of F
n_perms <- 999
F_sample <- rep(NA,n_perms)
for (i in 1:n_perms){
F_sample[i] <- permTest(bilirubin$pers,log(bilirubin$meas))
}
#Compute p-value using the sample of F-values
pval <- sum(F_sample > Fval)/n_perms
set.seed(2)
#Sample 999 values of F
n_perms <- 999
F_sample <- rep(NA,n_perms)
for (i in 1:n_perms){
F_sample[i] <- permTest(bilirubin$pers,log(bilirubin$meas))
}
#Compute p-value using the sample of F-values
pval <- sum(F_sample > Fval)/n_perms
set.seed(0)
#Sample 999 values of F
n_perms <- 999
F_sample <- rep(NA,n_perms)
for (i in 1:n_perms){
F_sample[i] <- permTest(bilirubin$pers,log(bilirubin$meas))
}
#Compute p-value using the sample of F-values
pval <- sum(F_sample > Fval)/n_perms
summary(fit)
